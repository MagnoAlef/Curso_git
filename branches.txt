O que são branches?
    branch e a forma que o git separa as versoes do projeto
    quando um projeto e criado ele inicia na branch main , estamos trabalhando nela ate este ponto
    do curso
    geralmente cada nova feature de um projeto fica em uma branch separado
    apos a finalizaçaõ das alteraçoes os branch sao unidos para ter o codigo fonte final
Criando e visualizando os branches
    para visualizar os branchs disponiveis basta digitar git branch
    para criar um branch voce precisa utilizar o comando git branch <nome>
    estas duas operacoes sao muito utilizadas no dia a dia de um dev
Deletando branches
    podemos deletar um branch com a flag -d ou --delete
    nao e comum deletar um branch , normalmente guardamos o historico do trabalho
    geralemnte se usa o delete quando o branch foi criado errado                               
Mudando de branch
    podemos mudar para outro branch utilizando o comando git checkout - b <nome>
    este comando tambem e utilizado para dispensar mudanças de um arquivo
    alterando o branch podemos levar alteraçoes que nao foram commitadas junto, tome cuidado                              
Unindo branches
    o codigo de dois branches distintos pode ser unido pelo comando git marge <nome>
    outro comando para a lista dos mais utilizados
    normalmente e por meio dele que recebemos as atualizacoes de outros devs
Stash
    podemos salvas as modificaçoes atuais para prosseguir com uma outra
    abordagem de solucao e nao perder o codigo
    o comando para esta acao e o git stash
    apos o comando o branch sera resetado para a sua versao de acordo com a repo
Recuperando stash
    podemos verificar as stashs criadas pelo comando git stash list
    e tambem podemos recuperar a stash com o comando git stash <nome>
    desta maneira podemos continuar de onde paramos com os arquivos
    adicionados a stash   
Removendo a stash
    para limpar totalmente as stash de um branch podemos utilizar o comando
    git stash clear     
    caso seja necessario deletar uma stash especifica podemos utilizar
    git stash drop <nome>  
Utilizando tags
    podemos criar tags nos branches por meio do comando 
    git tag -a <nome> -m "<msg>"
    a tag e diferente do stash serve como um checkpoint de um branche
    e utilizado para demarcar estagios do desemvolvimento de algum recurso                      
Verificando e alterando tags
    podemos verificar uma tag com o comando git show <nome>
    podemos trocar de tags com o comando git checkout <nome>
    desta maneira podemos retroceder ou avancar em checkpoints de uma branch
Enviando e compartilhando tags
as tags podem ser enviadas para o repositorio de codigo sendo 
compartilhada entre os devs
o comando e git push origin <main>
ou seja voce quiser enviar mais tags git push origin --tags

                               COMANDOS
    git branch // visualizar a branch atual
    git branch nome_branch // criado novo branches 
    git branch -d nome_branch // deletar branches
    git checkout nome_branch// mudanças de branch
    git checkout -b nome_branch // muda e criar nova branch
    git merge <nome> // junta o codigo
    git stash // reseta o codigo
    git stash list// verificar as stashs
    git stash apply 0// recuperar as stashs// o 0 e o numero da stash
    git stash clear //limpa as stash
    git stash drop <nome> // deletar stash especifica
    git tag -a <nome> -m "<msg>"// criando tags // git tag -a v1.0 -m "primeira versao"
    git show <nome> // verificar uma tag
    git checkout <nome>trocar de tags
    git push origin <nome_tags>//enviando tags para repositorio
    git push origin --tags//enviar todas as tags