O que são branches?
    branch e a forma que o git separa as versoes do projeto
    quando um projeto e criado ele inicia na branch main , estamos trabalhando nela ate este ponto
    do curso
    geralmente cada nova feature de um projeto fica em uma branch separado
    apos a finalizaçaõ das alteraçoes os branch sao unidos para ter o codigo fonte final
Criando e visualizando os branches
    para visualizar os branchs disponiveis basta digitar git branch
    para criar um branch voce precisa utilizar o comando git branch <nome>
    estas duas operacoes sao muito utilizadas no dia a dia de um dev
Deletando branches
    podemos deletar um branch com a flag -d ou --delete
    nao e comum deletar um branch , normalmente guardamos o historico do trabalho
    geralemnte se usa o delete quando o branch foi criado errado                               
Mudando de branch
    podemos mudar para outro branch utilizando o comando git checkout - b <nome>
    este comando tambem e utilizado para dispensar mudanças de um arquivo
    alterando o branch podemos levar alteraçoes que nao foram commitadas junto, tome cuidado                              
Unindo branches
    o codigo de dois branches distintos pode ser unido pelo comando git marge <nome>
    outro comando para a lista dos mais utilizados
    normalmente e por meio dele que recebemos as atualizacoes de outros devs
Recuperando stash
    podemos verificar as stashs criadas pelo comando git stash list
    e tambem podemos recuperar a stash com o comando git stash <nome>
    desta maneira podemos continuar de onde paramos com os arquivos
    adicionados a stash   
Removendo a stash
    para limpar totalmente as stash de um branch podemos utilizar o comando
    git stash clear     
    caso seja necessario deletar uma stash especifica podemos utilizar
    git stash drop <nome>  
    Utilizando tags
    podemos criar tags nos branches por meio do comando 
    git tag -a <nome> -m "<msg>"
    a tag e diferente do stash serve como um checkpoint de um branche
    e utilizado para demarcar estagios do desemvolvimento de algum recurso                      
Verificando e alterando tags
    podemos verificar uma tag com o comando git show <nome>
    podemos trocar de tags com o comando git checkout <nome>
    desta maneira podemos retroceder ou avancar em checkpoints de uma branch
Enviando e compartilhando tags
    as tags podem ser enviadas para o repositorio de codigo sendo 
    compartilhada entre os devs
    o comando e git push origin <main>
    ou seja voce quiser enviar mais tags git push origin --tags
Encontrando branches
    branches novos sao criados a todo tempo e o git pode nao estar mapeando eles
    com o comando fit fetch voce e atualizado de todos os branchs e tags
    que ainda nao estao reconhecidos por voce
    este comando e util para utilizar o branch de algum outro dev do time
Recebendo alteraçoes
    o comando git pull serve para recebermos atualizacoes do repositorio remoto
    cada branch pode ser atualizada com o git pull
    utilizamos para atualizar a master do repo como tambem quando 
    trabalhamos em conjunto e queremos receber as atualizacoes de um dev     
Enviando alteraçoes
    o comando git push faz o inverso do pull , ele envia as alteraçoes para o repo remoto
    serve tambem para enviar as atualizacoes de um branch especifico para outro dev
    ou quando terminamos uma tarefa e precisamos enviar ao repo                           
Utilizando o remote
    com o git remote podemos fazer algumas acoes como adiocionar 
    um repo para tackear ou remover 
    quando criamos um repo remoto adicionamos ele ao git remote add origin <link>    
trabalhando com submodulos
    submodulo e a maneira que temos de possuir dois ou mais projetos em um so repositorio
    podemos adicionar uma dependencia ao nosso projeto atual porem mantendo suas estruturas separadas
    para adicionar o submodulo utilizamos o comando git submodule add <repo>
    para verificar os submodules o comando e git submodule  
Atualizando o submodule
    para atualizar um submodule primeiro devemos commitar as mudancas
    e para enviar para o repo do submodule utilizamos o git push --recurse-submodules=on-demand   
    este fluxo fara a atualizacao apenas do submodule  
Exibindo informações
    o comando git show nos da diversas informaçoes uteis
    ele nos da as informações do branch atual e tambem seus commits 
    as modificaçoes de arquivos entre cada commit tambem sao exibidas
    podemos exibir as informaçoes de tags tambem com git show <tag>
Exibindo diferenças
    o comando git diff serve para exibir as diferenças de um branch
    quando utilizamos as diferenças do branch atual com o remoto serao exibidas no terminal
    podemos tambem verificar a diferença entre arquivos git diff <arquivo> <arquivo_b>    
Log resumido
    o comando git shortlog nos da um log resumido do projeto
    cada commit sera unido por nome do autor
    podemos entao saber quais commits foram enviados ao projeto e por quem    
Limpando arquivos untrancked
    o comando git clean vai verificar e limpar arquivos nao estao sendo trackeados
    ou seja todos que voce nao utilizou git add
    utilizado para arquivos que sao gerados automaticamente por 
    exemplo e atrapalham a visualização do que e realmente importante    
Otimizando o repositorio
    o comando git gc e uma abreviação para garbage collector
    ele identifica arquivos que nao sao mais necessarios e os exclui
    isso fara com que o repositorio seja otimizado em questoes de performance    
checando integridade de arquivos
    o comando git fsck e uma abreviação de file system check
    esta instrucao verifica a integridade de arquivos e sua conectividade
    verifcando assim possiveis corrupcoes em arquivos
    comando de rotina utilizado para ver se esta tudo certo com nossos arquivos
Reflog
    o git reflog vai mapear todos os seus passos no repositorio ate uma mudanca de branch e inserida neste log
    ja o git log que vimos anteriormente apenas armazena os commits de um branch
    os reflog ficam salvos ate expirar o tempo de expiração padrao e de 30 dias
Transformando o repo para arquivo
    com o comando git archive podemos transformar o repo em arquivo compactado por exemplo
    o comando e git archive --format zip --output master_files.zip main
    e entao a master vai estar zipada no arquivo master_files.zip 
                               COMANDOS
    git branch // visualizar a branch atual
    git branch nome_branch // criado novo branches 
    git branch -d nome_branch // deletar branches
    git checkout nome_branch// mudanças de branch
    git checkout -b nome_branch // muda e criar nova branch
    git merge <nome> // junta o codigo
    git merge origin/nome// as vezes tem que ser assim
    git stash // reseta o codigo
    git stash list// verificar as stashs
    git stash apply 0// recuperar as stashs// o 0 e o numero da stash
    git stash clear //limpa as stash
    git stash drop <nome> // deletar stash especifica
    git tag -a <nome> -m "<msg>"// criando tags // git tag -a v1.0 -m "primeira versao"
    git show <nome> // verificar uma tag
    git checkout <nome>trocar de tags
    git push origin <nome_tags>//enviando tags para repositorio
    git push origin --tags//enviar todas as tags
    git fetch // atualizando os branches de todo time
    git remote add origin <link>//adiocionar um repo para tracker ou remove
    git remote -v // ver as origens do https do repositorio
    git remote rm origin // remove a origim do repositorio.
    git submodule  // verificar os submodules
    git submodule add <repo>//adicionar os submodules
    git push --recurse-submodules=on-demand//enviar para o repo
    git show // informaçoes da branch atual e seus commits
    git show <tag> // informaçoes das tags
    git diff //exibir as diferenças de um branch
    git diff <arquivo> <arquivo_b> // diferenca entre arquivos
    git shortlog // da um log resumido do projeto
    git clean ou git clean -f// limpar arquivos que nao sao adicionados pelo git add 
    git gc // identifica arquivos que nao sao usados e os excluir
    git fsck // verifica a integridade de arquivos e sua conectividade
     o git reflog // vai mapear todos os seus passos no repositorio
     git archive --format zip --output master_files.zip main  // transformar o repo em arquivo




                              